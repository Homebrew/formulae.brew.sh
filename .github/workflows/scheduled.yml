name: Scheduled regeneration
on:
  push:
    paths:
      - .github/workflows/scheduled.yml
  schedule:
    # Once every hour
    - cron: "0 * * * *"

concurrency:
  group: scheduled
  cancel-in-progress: true

jobs:
  generate-cask:
    if: startsWith( github.repository, 'Homebrew/' )
    name: Generate homebrew/cask data, pages and API
    runs-on: macos-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Set up analytics
        env:
          ANALYTICS_JSON_KEY: ${{ secrets.HOMEBREW_FORMULAE_BREW_SH_ANALYTICS_JSON_KEY }}
        run: echo "$ANALYTICS_JSON_KEY" > ~/.homebrew_analytics.json

      - name: Update data for homebrew/cask
        run: |
          brew update-reset $(brew --repository homebrew/cask)
          /usr/bin/rake cask

      - name: Remove non-cask data
        run: rm -rf _data/analytics _data/analytics-linux _data/bottle _data/formula api/analytics api/analytics-linux api/bottle api/formula

      - name: Archive data
        run: tar czvf data-cask.tar.gz _data/ api/ cask/

      - uses: actions/upload-artifact@v3
        with:
          name: data-cask
          path: data-cask.tar.gz
          retention-days: 1
  generate-core:
    if: startsWith( github.repository, 'Homebrew/' )
    name: Generate homebrew/core data, pages and API
    runs-on: macos-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Set up analytics
        env:
          ANALYTICS_JSON_KEY: ${{ secrets.HOMEBREW_FORMULAE_BREW_SH_ANALYTICS_JSON_KEY }}
        run: echo "$ANALYTICS_JSON_KEY" > ~/.homebrew_analytics.json

      - name: Update data for homebrew/core
        run: /usr/bin/rake formulae

      - name: Remove non-core data
        run: rm -rf _data/analytics _data/analytics-linux _data/cask api/analytics api/analytics-linux api/cask api/cask-source

      - name: Archive data
        run: tar czvf data-core.tar.gz _data/ api/ formula/

      - uses: actions/upload-artifact@v3
        with:
          name: data-core
          path: data-core.tar.gz
          retention-days: 1
  generate-analytics:
    if: startsWith( github.repository, 'Homebrew/' )
    name: Generate analytics data
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Set up dependency stubs
        run: |
          # create stubs so build dependencies aren't incorrectly flagged as missing
          for i in python svn unzip xz
          do
            sudo touch /usr/bin/$i
            sudo chmod +x /usr/bin/$i
          done

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.6"

      - name: Set up analytics
        env:
          ANALYTICS_JSON_KEY: ${{ secrets.HOMEBREW_FORMULAE_BREW_SH_ANALYTICS_JSON_KEY }}
        run: echo "$ANALYTICS_JSON_KEY" > ~/.homebrew_analytics.json

      - name: Update analytics data
        run: rake all_analytics

      - name: Remove non-analytics data
        run: rm -rf _data/bottle _data/cask _data/formula

      - name: Archive data
        run: tar czvf data-analytics.tar.gz _data/

      - uses: actions/upload-artifact@v3
        with:
          name: data-analytics
          path: data-analytics.tar.gz
          retention-days: 1
  generate-samples:
    if: startsWith( github.repository, 'Homebrew/' )
    name: Generate API samples
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Set up dependency stubs
        run: |
          # create stubs so build dependencies aren't incorrectly flagged as missing
          for i in python svn unzip xz
          do
            sudo touch /usr/bin/$i
            sudo chmod +x /usr/bin/$i
          done

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.6"

      - name: Update data for api samples
        run: rake api_samples

      - uses: actions/upload-artifact@v3
        with:
          name: api-samples
          path: _includes/api-samples/
          retention-days: 1
  build:
    needs: [generate-cask, generate-core, generate-analytics, generate-samples]
    runs-on: ubuntu-22.04
    steps:
      - name: Set up Git repository
        uses: actions/checkout@master

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.6"

      - name: Install RubyGems
        run: |
          gem install bundler -v "~>1"
          bundle install --jobs 4 --retry 3

      - uses: actions/download-artifact@v3

      - name: Move artifacts into place
        run: |
          tar xf data-analytics/data-analytics.tar.gz
          tar xf data-cask/data-cask.tar.gz
          tar xf data-core/data-core.tar.gz
          mv api-samples _includes/api-samples

      - name: Generate site
        run: bundle exec rake build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
  deploy:
    needs: build
    if: ${{ github.ref_name == 'master' }}
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      deploy_url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
  deploy-issue:
    name: Open/close deploy issues
    needs: [generate-cask, generate-core, generate-analytics, generate-samples, build, deploy]
    if: ${{ always() && github.ref_name == 'master' }}
    env:
      GH_TOKEN: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}
      REPO: ${{ github.repository }}
    runs-on: ubuntu-latest
    steps:
      - name: Find existing deploy failure issue
        run: |
          EXISTING_ISSUE=$(gh issue list --repo "$REPO" --author BrewTestBot --label 'deploy failure' | awk '{print $1}')
          echo "EXISTING_ISSUE=$EXISTING_ISSUE" >> $GITHUB_ENV
          echo "WORKFLOW_URL=https://github.com/Homebrew/formulae.brew.sh/actions/runs/$RUN_ID" >> $GITHUB_ENV
        env:
          RUN_ID: ${{ github.run_id }}
      - name: Report deploy failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          ISSUE_TITLE="formulae.brew.sh deployment failed!"
          ISSUE_BODY="The most recent [formulae.brew.sh deployment failed]($WORKFLOW_URL)."
          if [ -n "$EXISTING_ISSUE" ]; then
            gh issue edit "$EXISTING_ISSUE" --repo "$REPO" --body "$(echo -e "$ISSUE_BODY")"
          else
            gh issue create --repo "$REPO" --title "$ISSUE_TITLE" --label "deploy failure" --body "$(echo -e "$ISSUE_BODY")"
          fi
      - name: Report deploy success
        if: ${{ needs.deploy.result == 'success' }}
        run: |
          COMMENT_BODY="The most recent [formulae.brew.sh deployment succeeded]($WORKFLOW_URL). Closing issue."
          if [ -n "$EXISTING_ISSUE" ]; then
            gh issue comment "$EXISTING_ISSUE" --repo "$REPO" --body "$(echo -e "$COMMENT_BODY")"
            gh issue close "$EXISTING_ISSUE" --repo "$REPO"
          fi
  algolia_recrawl:
    needs: deploy
    name: Algolia Recrawl
    # This is run on a schedule by Algolia too so we don't care about failures.
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - name: Algolia crawler creation and recrawl
        uses: algolia/algoliasearch-crawler-github-actions@v1
        id: crawler_push
        with:
          override-config: true
          site-url: ${{ needs.deploy.outputs.deploy_url }}
          crawler-user-id: ${{ secrets.CRAWLER_USER_ID }}
          crawler-api-key: ${{ secrets.CRAWLER_API_KEY }}
          algolia-app-id: ${{ secrets.ALGOLIA_APP_ID }}
          algolia-api-key: ${{ secrets.ALGOLIA_API_KEY }}
